package edu.buffalo.cse.cse486586.simpledynamo;

import java.io.File;
import java.io.IOException;
import java.net.ServerSocket;
import java.util.HashMap;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;

import Helpers.AppData;
import Helpers.ClientTask;
import Helpers.LinkedList;
import Helpers.LinkedListNode;
import Helpers.MySQLHelper;
import Helpers.ServerTask;

import android.content.ContentProvider;
import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.MatrixCursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteException;
import android.net.Uri;
import android.telephony.TelephonyManager;
import android.util.Log;

public class SimpleDynamoProvider extends ContentProvider {

	static final int SERVER_PORT = 10000;

	private SQLiteDatabase myDatabase;
	MySQLHelper myDatabaseHelper;

	private class MyTimerTask extends TimerTask {
		UUID uniqueId;

		public MyTimerTask(UUID tId) {
			this.uniqueId = tId;
			AppData.timerMap.put(uniqueId, true);
		}

		@Override
		public void run() {
			if (AppData.timerMap.containsKey(uniqueId)) {
				AppData.timerMap.put(uniqueId, false);
			}
			this.cancel();
		}
	}

	@Override
	public boolean onCreate() {

		AppData.insertResponseMap = new HashMap<String, Boolean>();
		AppData.senderResponseMap = new HashMap<String, String>();
		AppData.senderAllResponseMap = new HashMap<String, String>();
		AppData.receiverResponseMap = new HashMap<String, String>();
		AppData.receiverAllResponseMap = new HashMap<String, String>();

		AppData.keyLockMap = new HashMap<String, Object>();
		AppData.timerMap = new HashMap<UUID, Boolean>();

		AppData.buildUri("content", "edu.buffalo.cse.cse486586.simpledynamo.provider");

		TelephonyManager tel = (TelephonyManager) this.getContext().getSystemService(
				Context.TELEPHONY_SERVICE);
		String portStr = tel.getLine1Number().substring(tel.getLine1Number().length() - 4);
		AppData.myPort = String.valueOf((Integer.parseInt(portStr) * 2));

		try {
			/*
			 * Create a server socket and a thread (AsyncTask) that listens on
			 * the server port.
			 */
			ServerSocket serverSocket = new ServerSocket(SERVER_PORT);
			new Thread(new ServerTask(serverSocket)).start();
		} catch (IOException e) {
			Log.e(AppData.TAG, "Cannot create a ServerSocket");
			return false;
		}

		/* Prepare Dynamo List */
		LinkedListNode node = new LinkedListNode(AppData.REMOTE_PORTS_DYNAMO_ORDER[0], null, null);
		node.setPreviousNode(node);
		node.setNextNode(node);
		AppData.dynamoList = new LinkedList(node);
		for (int i = 1; i < 5; i++) {
			AppData.dynamoList.insertNodeIntoList(AppData.REMOTE_PORTS_DYNAMO_ORDER[i]);
		}

		/*
		 * Create/retrieve database depending on whether it already exists or
		 * not.
		 */
		final boolean exists = checkIfDatabaseExists();

		if (exists) {
			new Timer().schedule(new TimerTask() {
				@Override
				public void run() {
					failureRecoveryOnNodeRejoin();
				}
			}, 3000);
		}

		if (myDatabase == null)
			return false;
		else
			return true;
	}

	private boolean checkIfDatabaseExists() {

		boolean returnValue = false;

		try {
			File database = this.getContext().getDatabasePath(AppData.DATABASE_NAME);
			if (database.exists()) {
				Log.v(AppData.TAG + "Database", "Found database. Retrieving now!");
				String myPath = database.getAbsolutePath();
				SQLiteDatabase retrievedDB = SQLiteDatabase.openDatabase(myPath, null,
						SQLiteDatabase.OPEN_READWRITE);
				myDatabase = retrievedDB;
				AppData.mainDatabase = myDatabase;

				returnValue = true;

			} else {
				myDatabaseHelper = new MySQLHelper(getContext());
				myDatabase = myDatabaseHelper.getWritableDatabase();
				AppData.mainDatabase = myDatabase;

				Log.v(AppData.TAG + "Database", "Database Not Found. Creating now!");
			}
		} catch (SQLiteException e) {

			myDatabaseHelper = new MySQLHelper(getContext());
			myDatabase = myDatabaseHelper.getWritableDatabase();
			AppData.mainDatabase = myDatabase;

			Log.v(AppData.TAG + "Database", "Database Not Found. Creating now!");
		}

		return returnValue;
	}

	public void failureRecoveryOnNodeRejoin() {

		Log.v(AppData.TAG + " Database", "Rejoining");

		AppData.myContentResolver.delete(AppData.mUri, "@", null);
		Cursor c = AppData.myContentResolver.query(AppData.mUri, null, "*", null, null);

		if (c == null) {
			return;
		}

		int keyIndex = c.getColumnIndex(AppData.KEY_FIELD);
		int valueIndex = c.getColumnIndex(AppData.VALUE_FIELD);
		if (keyIndex == -1 || valueIndex == -1) {
			Log.e(AppData.TAG, "Wrong columns");
			c.close();
		}

		c.moveToFirst();

		synchronized (AppData.recoveryLock) {
			while (c.isAfterLast() == false) {

				String key = c.getString(c.getColumnIndex(AppData.KEY_FIELD));
				String value = c.getString(c.getColumnIndex(AppData.VALUE_FIELD));

				/*
				 * Get correct node to insert into from linked list based on
				 * key's hash value
				 */
				String coordinator = AppData.dynamoList.getCoordinatorForKey(key);
				String nextPortNumber = AppData.dynamoList.getNextPortNumber(coordinator);
				String nextToNextPortNumber = AppData.dynamoList.getNextPortNumber(nextPortNumber);

				if ((AppData.myPort.equals(coordinator)) || (AppData.myPort.equals(nextPortNumber))
						|| (AppData.myPort.equals(nextToNextPortNumber))) {

					if (!(AppData.keyLockMap.keySet().contains(key))) {
						AppData.keyLockMap.put(key, new Object());
					}

					Log.v(AppData.TAG + " Database", "Recovery adding key : " + key);

					ContentValues cv = new ContentValues();
					cv.put(AppData.KEY_FIELD, key);
					cv.put(AppData.VALUE_FIELD, value);

					long row = myDatabase.insertWithOnConflict(AppData.MY_TABLE_NAME, null, cv,
							SQLiteDatabase.CONFLICT_REPLACE);
					if (row <= 0) {
						throw new SQLException("Failed to add a new record into " + AppData.mUri);
					}
					Log.v(AppData.TAG + " Failure Recovery", key);

				}

				c.moveToNext();
			}
		}
		c.close();
	}

	@Override
	public Uri insert(Uri uri, ContentValues values) {

		String value = (String) values.get(AppData.VALUE_FIELD);
		String key = (String) values.get(AppData.KEY_FIELD);
		Integer serverInsertCommand = values.getAsInteger(AppData.INSERT_FIELD);

		if (!(AppData.keyLockMap.keySet().contains(key))) {
			AppData.keyLockMap.put(key, new Object());
		}

		/*
		 * Get correct node to insert into from linked list based on key's hash
		 * value
		 */
		String coordinator = AppData.dynamoList.getCoordinatorForKey(key);
		String nextPortNumber = AppData.dynamoList.getNextPortNumber(coordinator);
		String nextToNextPortNumber = AppData.dynamoList.getNextPortNumber(nextPortNumber);

		boolean putHereFromServer = ((serverInsertCommand != null) && (serverInsertCommand
				.intValue() == 1));
		boolean replicas = ((AppData.myPort.equals(nextPortNumber)) || (AppData.myPort
				.equals(nextToNextPortNumber)));
		boolean isCoordinator = (AppData.myPort.equals(coordinator));

		if ((putHereFromServer && (replicas || isCoordinator)) || (isCoordinator)) {
			synchronized (AppData.recoveryLock) {
				synchronized (AppData.keyLockMap.get(key)) {
					/* Replication */
					long row = myDatabase.insertWithOnConflict(AppData.MY_TABLE_NAME, null, values,
							SQLiteDatabase.CONFLICT_REPLACE);
					if (row <= 0) {
						throw new SQLException("Failed to add a new record into " + uri);
					}
					Log.v(AppData.TAG + " Inserting", key);
				}
			}
		}

		if ((!putHereFromServer)) {
			if (!isCoordinator) {
				Log.v(AppData.TAG + " Sending Insert", key + " --> " + coordinator);
				new Thread(new ClientTask("SimplyInsert", key, value, coordinator)).start();
			}
			new Thread(new ClientTask("SimplyInsert", key, value, nextPortNumber)).start();
			new Thread(new ClientTask("SimplyInsert", key, value, nextToNextPortNumber)).start();
			Log.v(AppData.TAG + " Sending Replicate", key + " to " + nextPortNumber + " and "
					+ nextToNextPortNumber);
		}

		Log.v("insert", values.toString());
		return uri;
	}

	@Override
	public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs,
			String sortOrder) {

		if (!(AppData.keyLockMap.keySet().contains(selection))) {
			AppData.keyLockMap.put(selection, new Object());
		}

		Cursor cursor = null;
		UUID uId = UUID.randomUUID();

		if (selection.equals("*")) {

			/* Return all key-value pairs from entire Dynamo System */
			new Thread(new ClientTask("QueryAll")).start();

			Timer timer = new Timer();
			timer.schedule(new MyTimerTask(uId), 5000);

			int i = 0;
			int length = AppData.dynamoList.getLength();
			Log.v(AppData.TAG + uId + " Query All", "Waiting for " + length + " responses or 60s!");
			while ((AppData.receivedResponses != (length)) && (AppData.timerMap.get(uId))) {
				/* Wait for response to come */
				if ((i % 10000000) == 0) {
					Log.v(AppData.TAG + uId, "Provider - 3");
				}
				i++;
			}
			Log.v(AppData.TAG + uId + " Query All", "Got " + AppData.receivedResponses
					+ " responses");

			/* Get back all responses in the receiverAllResponseMap and put them into one cursor. */
			MatrixCursor m = new MatrixCursor(
					new String[] { AppData.KEY_FIELD, AppData.VALUE_FIELD });
			for (String s : AppData.receiverAllResponseMap.keySet()) {
				m.addRow(new String[] { s, AppData.receiverAllResponseMap.get(s) });
			}
			cursor = m;
			m.close();

			AppData.receiverAllResponseMap.clear();
			AppData.receivedResponses = 0;
			AppData.queryAllTimeoutOccurred = false;

		} else if (selection.equals("@")) {
			/*
			 * Received a query @ operation. Return key-value pairs from only
			 * this node.
			 */
			cursor = myDatabase.rawQuery("SELECT " + AppData.KEY_FIELD + ", " + AppData.VALUE_FIELD
					+ " FROM " + AppData.MY_TABLE_NAME, null);
		} else {

			String coordinator = AppData.dynamoList.getCoordinatorForKey(selection);
			String nextPortNumber = AppData.dynamoList.getNextPortNumber(coordinator);
			String nextToNextPortNumber = AppData.dynamoList.getNextPortNumber(nextPortNumber);

			if ((selectionArgs != null) && (selectionArgs.length > 0)
					&& (selectionArgs[0].equals("SimplyQuery"))) {
				synchronized (AppData.keyLockMap.get(selection)) {
					synchronized (AppData.recoveryLock) {
						cursor = myDatabase.rawQuery("SELECT " + AppData.KEY_FIELD + ", "
								+ AppData.VALUE_FIELD + " FROM " + AppData.MY_TABLE_NAME
								+ " WHERE key = ?", new String[] { selection });
					}
				}
			} else { /* Main query handling. */

				if (coordinator.equals(AppData.myPort)) {
					synchronized (AppData.keyLockMap.get(selection)) {
						synchronized (AppData.recoveryLock) {
							cursor = myDatabase.rawQuery("SELECT " + AppData.KEY_FIELD + ", "
									+ AppData.VALUE_FIELD + " FROM " + AppData.MY_TABLE_NAME
									+ " WHERE key = ?", new String[] { selection });
						}
					}
				} else {
					
					while (AppData.receiverResponseMap.get(selection) != null);
					synchronized (AppData.receiverResponseMap) {
						AppData.receiverResponseMap.put(selection, "");
					}
					
					/* Send query to the coordinator */
					new Thread(new ClientTask("QueryFromCoordinator", selection, coordinator,
							AppData.myPort)).start();
					Log.v(AppData.TAG + uId, "Sent query " + selection + " to " + coordinator);

					Timer timer = new Timer();
					timer.schedule(new MyTimerTask(uId), 2000);

					int i = 0;
					while ((AppData.receiverResponseMap.get(selection).equals(""))
							&& (AppData.timerMap.get(uId))) {
						if ((i % 10000000) == 0) {
							Log.v(AppData.TAG + uId, "Provider - 4.ii.a " + selection + " : "
									+ AppData.receiverResponseMap.get(selection) + "%%");
						}
						i++;
					}

					/* If timeout, query middle of the chain */
					if (AppData.receiverResponseMap.get(selection).equals("")) {
						timer = new Timer();
						timer.schedule(new MyTimerTask(uId), 2000);

						/* Query the middle of the chain */
						new Thread(new ClientTask("QueryFromCoordinator", selection,
								nextPortNumber, AppData.myPort)).start();
						Log.v(AppData.TAG + uId, "Sent next query " + selection + " to "
								+ nextPortNumber);

						i = 0;
						while ((AppData.receiverResponseMap.get(selection).equals(""))
								&& (AppData.timerMap.get(uId))) {
							if ((i % 10000000) == 0) {
								Log.v(AppData.TAG + uId, "Provider - 4.ii.b " + selection + " : "
										+ AppData.receiverResponseMap.get(selection) + "%%");
							}
							i++;
						}
					}

					/* If timeout, query tail of the chain */
					if (AppData.receiverResponseMap.get(selection).equals("")) {
						timer = new Timer();
						timer.schedule(new MyTimerTask(uId), 2000);

						/* Query the tail of the chain */
						new Thread(new ClientTask("QueryFromCoordinator", selection,
								nextToNextPortNumber, AppData.myPort)).start();
						Log.v(AppData.TAG + uId, "Sent final query " + selection + " to "
								+ nextToNextPortNumber);

						i = 0;
						while ((AppData.receiverResponseMap.get(selection).equals(""))
								&& (AppData.timerMap.get(uId))) {
							if ((i % 10000000) == 0) {
								Log.v(AppData.TAG + uId, "Provider - 4.ii.c " + selection + " : "
										+ AppData.receiverResponseMap.get(selection) + "%%");
							}
							i++;
						}
					}
					
					Log.v(AppData.TAG + uId + uId, "Got query response for " + selection);

					MatrixCursor m = new MatrixCursor(new String[] { AppData.KEY_FIELD,
							AppData.VALUE_FIELD });
					m.addRow(new String[] { selection, AppData.receiverResponseMap.get(selection) });
					cursor = m;
					m.close();

					synchronized (AppData.receiverResponseMap) {
						AppData.receiverResponseMap.remove(selection);
					}
				}				
			}
		}

		if (AppData.timerMap.containsKey(uId)) {
			AppData.timerMap.remove(uId);
		}

		Log.v("query", selection + " on : " + uId);

		return cursor;
	}

	@Override
	public int delete(Uri uri, String selection, String[] selectionArgs) {

		if (selection.equals("*")) {
			/* Delete all key-value pairs from entire Dynamo */
			new Thread(new ClientTask("DeleteAll")).start();
		} else if (selection.equals("@")) {
			/*
			 * Received a delete @ operation. Delete key-value pairs from only
			 * this node
			 */
			myDatabase.delete(AppData.MY_TABLE_NAME, null, null);
		} else { /* Delete based on selection parameter */

			String coordinator = AppData.dynamoList.getCoordinatorForKey(selection);
			String nextPortNumber = AppData.dynamoList.getNextPortNumber(coordinator);
			String nextToNextPortNumber = AppData.dynamoList.getNextPortNumber(nextPortNumber);

			new Thread(new ClientTask("Delete", selection, nextPortNumber)).start();
			new Thread(new ClientTask("Delete", selection, nextToNextPortNumber)).start();

			/* Local delete */
			if (coordinator.equals(AppData.myPort)) {
				Log.v(AppData.TAG + " Deleting", selection);
				myDatabase.delete(AppData.MY_TABLE_NAME,
						AppData.KEY_FIELD + "='" + selection + "'", null);
			} else {
				/* Send out delete message to the correct node */
				new Thread(new ClientTask("Delete", selection, coordinator)).start();
			}
		}
		return 0;
	}

	@Override
	public String getType(Uri uri) {
		return null;
	}

	@Override
	public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs) {
		return 0;
	}
}
